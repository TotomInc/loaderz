"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Bluebird = require("bluebird");
/**
 * The `ImageLoader` class make sure to pre-load an image URL by using the
 * `HTMLImageElement`. It creates a local `new Image()` with the specified URL
 * as a `src` and ensure it is entirely loaded or failed by using
 * `image.onload()` and `image.onerror()` events.
 */
var ImageLoader = /** @class */ (function () {
    function ImageLoader() {
        /**
         * List of URLs to load when calling the `start()` function.
         */
        this.urls = [];
    }
    /**
     * Add URLs to load. Return an array of queued URLs to load.
     *
     * @param newURLs an array of URLs to add for the loading sequence
     * @returns an array of already queued URLs for the loading sequence
     */
    ImageLoader.prototype.queue = function (newURLs) {
        var _this = this;
        newURLs.forEach(function (url) { return _this.urls.push(url); });
        return this.urls;
    };
    /**
     * Start the loading of all URls registered, create an array of promises
     * generated by the `promise` function. Return a `Promise.all()` of all
     * image promises.
     *
     * @returns a `Promise.all()` of all image-promises
     */
    ImageLoader.prototype.start = function () {
        var _this = this;
        var promises = this.urls.map(function (url) { return _this.promise(url); });
        return Bluebird.Promise.all(promises);
    };
    /**
     * Create a dummy `HTMLImageElement` with the URL as the src attribute inside
     * a promise, that is resolved with the `image.onload` event or rejected with
     * the `image.onerror` event.
     *
     * @param url image-url to load
     * @returns the image-promise generated
     */
    ImageLoader.prototype.promise = function (url) {
        return new Bluebird.Promise(function (resolve, reject) {
            var image = new Image();
            image.onload = function () { return resolve({ url: url, loaded: true, type: 'image' }); };
            image.onerror = function () { return reject({ url: url, loaded: false, type: 'image' }); };
            image.src = url;
        });
    };
    return ImageLoader;
}());
exports.ImageLoader = ImageLoader;
//# sourceMappingURL=image-loader.js.map