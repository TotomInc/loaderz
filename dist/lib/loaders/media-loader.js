"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Bluebird = require("bluebird");
/**
 * The `MediaLoader` class make sure to pre-load a media (video/audio) URL by
 * using the `HTMLAudioElement` or `HTMLVideoElement`. It creates a local
 * `new Audio()` or `new Video()` with the specified URL as a `src` and ensure
 * it is entirely loaded or failed by using `element.oncanplaythrough()` and
 * `element.onerror()` events.
 */
var MediaLoader = /** @class */ (function () {
    function MediaLoader() {
        /**
         * Array of `MediaData` to load when calling the `start()` function.
         */
        this.medias = [];
    }
    /**
     * Add URLs to load. Return an array of queued URLs to load.
     *
     * @param newURLs an array of URLs to add for the loading sequence
     * @returns an array of already queued URLs for the loading sequence
     */
    MediaLoader.prototype.queue = function (media) {
        var _this = this;
        media.forEach(function (media) { return _this.medias.push(media); });
    };
    /**
     * Start the loading of all URls registered, create an array of promises
     * generated by the `promise` function. Return a `Promise.all()` of all
     * media promises.
     *
     * @returns a `Promise.all()` of all media-promises
     */
    MediaLoader.prototype.start = function () {
        var _this = this;
        var promises = this.medias.map(function (media) { return _this.promise(media); });
        return Promise.all(promises);
    };
    /**
     * Create dummy `HTMLAudioElement` or `HTMLVideoElement` with the URL as the
     * src attribute inside a promise, that is resolved with the
     * `element.oncanplaythrough` event or rejected with the `element.onerror`
     * event.
     *
     * @param media media-data containing its type and the URL
     * @returns the media-promise generated
     */
    MediaLoader.prototype.promise = function (media) {
        return new Bluebird.Promise(function (resolve, reject) {
            var element = document.createElement(media.type);
            element.oncanplaythrough = function () { return resolve({ loaded: true, url: media.url, type: media.type }); };
            element.onerror = function () { return resolve({ loaded: false, url: media.url, type: media.type }); };
            element.src = media.url;
        });
    };
    return MediaLoader;
}());
exports.MediaLoader = MediaLoader;
//# sourceMappingURL=media-loader.js.map